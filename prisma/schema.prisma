generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // Uses connection pooling
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id          String        @id
  username    String        @unique
  avatar      String?
  cover       String?
  stageName   String?
  realName    String?
  bio         String?
  dateOfBirth DateTime?
  city        String?
  country     String?
  genres      UserGenre[] // Connects the user with genres through the join table
  musicSample MusicSample[]
  socialMedia SocialMedia[]
  events      Event[]
  gallery     Gallery[]
  videos      Video[]
  reviews     Review[]
  createdAt   DateTime      @default(now())
}

model Genre {
  id    String      @id @default(cuid())
  name  String      @unique
  users UserGenre[]
}

model UserGenre {
  userId  String
  genreId String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  genre Genre @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@id([userId, genreId]) // Composite key for many-to-many relationship
}

model Review {
  id        String   @id @default(cuid())
  message   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model MusicSample {
  id        String   @id @default(cuid())
  platform  String
  url       String
  createdAt DateTime @default(now())

  User User[]
}

model SocialMedia {
  id        String   @id @default(cuid())
  platform  String
  url       String
  createdAt DateTime @default(now())

  User User[]
}

model Event {
  id        Int      @id @default(autoincrement())
  clubName  String
  eventName String?
  date      DateTime
  location  String?
  dressCode String?
  entryFees Int?
  eventUrl  String?
  mapUrl    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
}

model Gallery {
  id        String   @id @default(cuid())
  imageUrl  String
  createdAt DateTime @default(now())

  User User[]
}

model Video {
  id        String   @id @default(cuid())
  videoUrl  String
  createdAt DateTime @default(now())

  User User[]
}
